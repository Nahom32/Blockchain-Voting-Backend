generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model Users {
  id         String   @id @default(uuid())
  email      String  @db.VarChar(255)
  password   String  @db.VarChar(255)
  isEmailVerified Boolean @default(false)
  role       Role 
  saltRounds Int @db.Integer
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  organizations     Organizations[]
}

enum Role {
  ADMIN
  ELECTOR
  ELECTION_CREATOR
}

model Organizations{
    id       String   @id @default(uuid())
    name     String  @db.VarChar(255)
    shortName     String  @db.VarChar(255)
    isActive Boolean @default(false)

    users   Users  @relation(fields: [userId], references: [id])
    userId  String 
    members Members[]
    MemberCategories MemberCategory[]

    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model MemberCategory{
    id       String   @id @default(uuid())
    name     String  @db.VarChar(255)
    organization   Organizations @relation(fields: [organizationId], references: [id])
    organizationId String 
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model Members{
    id       String   @id @default(uuid())
    name     String  @db.VarChar(255)
    email      String  @db.VarChar(255)

    organization   Organizations @relation(fields: [organizationId], references: [id])
    organizationId String 
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model Otp {
    id       String   @id @default(uuid())
    userId String
    type     OtpType
    otp      String
    otpExpiration DateTime?
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

enum OtpType {
    FORGET_PASSWORD
    EMAIL_VERIFICATION
}

model ElectionData {
  id       String   @id @default(uuid())
  electionId    String
  candidateId   String
  candidateName  String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}